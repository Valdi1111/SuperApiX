package org.valdi.SuperApiX.bukkit;

import com.google.common.base.Preconditions;
import org.bukkit.NamespacedKey;
import org.bukkit.plugin.Plugin;
import org.valdi.SuperApiX.bukkit.nms.IGeneralUtils;

import java.util.Locale;
import java.util.Optional;
import java.util.UUID;

public class SuperKey {

    /**
     * The namespace representing all inbuilt keys.
     */
    public static final String MINECRAFT = NamespacedKey.MINECRAFT;
    /**
     * The namespace representing all keys generated by Bukkit for backwards
     * compatability measures.
     */
    public static final String BUKKIT = NamespacedKey.BUKKIT;
    /**
     * The namespace representing all keys generated by SuperApiX for backwards
     * compatability measures.
     */
    public static final String SUPERAPIX = "superapix";
    //
    private final String namespace;
    private final String key;

    /**
     * Create a key in a specific namespace.
     *
     * @param namespace
     * @param key
     */
    public SuperKey(String namespace, String key) {
        Preconditions.checkArgument(namespace != null && !namespace.isEmpty(), "namespace");
        Preconditions.checkArgument(key != null, "key");

        this.namespace = namespace;
        this.key = key;

        String string = toString();
        Preconditions.checkArgument(string.indexOf(' ') == -1, "SuperKey cannot contain spaces (%s)", string);
        Preconditions.checkArgument(string.length() < 256, "SuperKey must be less than 256 characters", string);
    }

    /**
     * Create a key in the plugin's namespace.
     *
     * @param plugin the plugin to use for the namespace
     * @param key the key to create
     */
    public SuperKey(Plugin plugin, String key) {
        Preconditions.checkArgument(plugin != null, "plugin");
        Preconditions.checkArgument(key != null, "key");

        // Plugin names cannot have spaces anymore (SimplePluginManager)
        Preconditions.checkArgument(key.indexOf(' ') == -1, "key cannot contain spaces (%s)", key);

        this.namespace = plugin.getName().toLowerCase(Locale.ROOT);
        this.key = key.toLowerCase().toLowerCase(Locale.ROOT);

        String string = toString();
        Preconditions.checkArgument(string.length() < 256, "SuperKey must be less than 256 characters (%s)", string);
    }

    public String getNamespace() {
        return namespace;
    }

    public String getKey() {
        return key;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 47 * hash + this.namespace.hashCode();
        hash = 47 * hash + this.key.hashCode();
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj instanceof NamespacedKey) {
            final NamespacedKey other = (NamespacedKey) obj;
            return this.namespace.equals(other.getNamespace()) && this.key.equals(other.getKey());
        }
        if (obj instanceof SuperKey) {
            final SuperKey other = (SuperKey) obj;
            return this.namespace.equals(other.namespace) && this.key.equals(other.key);
        }
        return false;
    }

    @Override
    public String toString() {
        return this.namespace + ":" + this.key;
    }

    /**
     * Return a new random key in the {@link #BUKKIT} namespace.
     *
     * @return new key
     */
    public static SuperKey randomBukkitKey() {
        return new SuperKey(SuperKey.BUKKIT, UUID.randomUUID().toString());
    }

    /**
     * Return a new random key in the {@link #SUPERAPIX} namespace.
     *
     * @return new key
     */
    public static SuperKey randomKey() {
        return new SuperKey(SuperKey.SUPERAPIX, UUID.randomUUID().toString());
    }

    /**
     * Get a key in the Minecraft namespace.
     *
     * @param key the key to use
     * @return new key in the Minecraft namespace
     */
    public static SuperKey minecraft(String key) {
        return new SuperKey(SuperKey.MINECRAFT, key);
    }

    /**
     * Get a key in the Bukkit namespace.
     *
     * @param key the key to use
     * @return new key in the Bukkit namespace
     */
    public static SuperKey bukkit(String key) {
        return new SuperKey(SuperKey.BUKKIT, key);
    }

    /**
     * Get a key in the SuperApiX namespace.
     *
     * @param key the key to use
     * @return new key in the SuperApiX namespace
     */
    public static SuperKey superApiX(String key) {
        return new SuperKey(SuperKey.SUPERAPIX, key);
    }

    public static SuperKey fromNamespacedKey(NamespacedKey key) {
        return new SuperKey(key.getNamespace(), key.getKey());
    }

    public static SuperKey fromMinecraftKey(Object key) {
        return SuperApiBukkit.getInstance().getNmsProvider().getGeneralUtils().map(u -> u.spaceKeyFromMinecraft(key)).orElse(null);
    }

    public NamespacedKey toNamespacedKey() {
        return new NamespacedKey(this.namespace, this.key);
    }

    public Object toMinecraftKey() {
        return SuperApiBukkit.getInstance().getNmsProvider().getGeneralUtils().map(u -> u.minecraftKeyFromSpace(this)).orElse(null);
    }
}
